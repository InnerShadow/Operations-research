simple <- F
p <- ifelse(simple, rdunif(1,6,10), rdunif(1,10,30))
p
r <- ifelse(simple,2,rdunif(1,3,5))
r
library(igraph)
repeat
{
g <<- sample_gnp(p, ifelse(simple,0.2,0.05))
if(is_connected(g))
break
}
q <- length(E(g))
q
E(g)$weight <- rdunif(q,1,100)
V(g)$standby <- if(simple) rep(2,p) else rdunif(p,r,5)
E(g)$standby <- if(simple) rep(2,q) else rdunif(q,r,5)
v <- farthest_vertices(g)$vertices
v
k <- v[1]
l <- v[2]
library(stringr)
latex_array <- \(x) gsub('(.{0,100})\\K,',',\\\\\\\\', paste(x, collapse = ',') |> paste0(',')  , perl=TRUE) |> str_sub(end = -4)
latex_adj_list <- \(g) g |> as_edgelist() |> apply(1, \(edg) edg |> paste(collapse = '\\ue')) |> latex_array()
plot(g, layout = layout.circle, edge.label = E(g)$weight)
edge_list <- as_edgelist(g)
length(edge_list)
W <- E(g)$weight
length(W)
filter_loops <- function(paths) {
filtered_paths <- lapply(paths, function(path) {
if (!anyDuplicated(path)) {
return(path)
}
return(NULL)
})
return(filtered_paths[!sapply(filtered_paths, is.null)])
}
find_non_loop_paths <- function(g, k, l) {
all_paths <- all_simple_paths(g, from = k, to = l)
non_loop_paths <- filter_loops(all_paths)
return(non_loop_paths)
}
non_loop_paths <- find_non_loop_paths(g, k, l)
length(non_loop_paths)
calculate_time_delay <- function(path, graph) {
edge_indices <- t(combn(path, 2))
edge_weights <- sapply(1:(nrow(edge_indices)), function(j) {
edge <- get.edge.ids(graph, edge_indices[j, ])
if (length(edge) > 0) {
return(E(graph)$weight[edge])
} else {
return(0)
}
})
return(sum(unlist(edge_weights)))
}
time_delays <- sapply(non_loop_paths, calculate_time_delay, graph = g)
# time_delays
# time_delays <- numeric(length(non_loop_paths))
#
# for (i in seq_along(non_loop_paths)) {
#   path <- non_loop_paths[[i]]
#   edge_weights <- sapply(seq_along(path)[-1], function(j) {
#     edge <- get.edge.ids(g, c(path[j - 1], path[j]))
#     if (length(edge) > 0) {
#       return(E(g)$weight[edge])
#     } else {
#       return(0)
#     }
#   })
#   time_delay <- sum(edge_weights)
#   time_delays[i] <- time_delay
# }
#
# print(time_delays)
N <- length(non_loop_paths)
Fun <- c(rep(0, p + q), c(time_delays))
A <- c(rep(0, p + q), rep(1, N))
B <- c(r)
A
n_size <- p + q + N
constr_row <- function(...) {
tmp <- rep(0, n_size)
tmp[c(...)] <- 1
return(tmp)
}
limitation_id <- 2
for (i in 1 : length(non_loop_paths)){
A <- rbind(A, constr_row(non_loop_paths[[i]]))
A[limitation_id, p + q + i] <- 1
limitation_id <- limitation_id + 1
B <- c(B, V(g)$standby[1])
edge_list <- c()
for(j in 1 : length(non_loop_paths[[i]]) - 1){
if(j == length(non_loop_paths[[i]]) - 1){
break
}
vertex1 <- non_loop_paths[[i]][j + 1]
vertex2 <- non_loop_paths[[i]][j + 2]
edge <- get.edge.ids(g, c(vertex1, vertex2))
edge_list <- c(edge_list, edge)
}
A <- rbind(A, constr_row(edge_list + p))
A[limitation_id, p + q + i] <- 1
limitation_id <- limitation_id + 1
B <- c(B, E(g)$standby[1])
}
# A
CD <- c("=", rep("<=", nrow(A) - 1))
CD
library(lpSolve)
optimum <- lp(
direction = "min",
objective.in = Fun,
const.mat = A,
const.dir = CD,
const.rhs = B,
all.bin = TRUE
)
optimum
optimum$solution
routes_id <- which(optimum$solution == 1) - p - q
routes_id
for(i in routes_id){
cat(non_loop_paths[[i]])
cat("\n")
}
plot_graph_with_routes <- function(graph, selected_routes) {
E(graph)$color <- "black"
edge_list <- c()
for (route in selected_routes) {
for (j in 1:(length(route) - 1)) {
vertex1 <- route[j]
vertex2 <- route[j + 1]
edge <- get.edge.ids(graph, c(vertex1, vertex2))
if (length(edge) > 0) {
edge_list <- c(edge_list, edge)
}
}
}
E(graph)$color[edge_list] <- "red"
plot(graph, layout = layout.circle, edge.label = E(graph)$weight)
}
v
for (i in routes_id) {
plot_graph_with_routes(g, list(non_loop_paths[[i]]))
title <- paste("Маршрут", i)
title(main = title)
}
plot_graph_with_routes <- function(graph, selected_routes) {
V(graph)$color <- "orange"
V(graph)$color[V(graph)$name %in% special_nodes] <- "cyan"
E(graph)$color <- "black"
edge_list <- c()
for (route in selected_routes) {
for (j in 1:(length(route) - 1)) {
vertex1 <- route[j]
vertex2 <- route[j + 1]
edge <- get.edge.ids(graph, c(vertex1, vertex2))
if (length(edge) > 0) {
edge_list <- c(edge_list, edge)
}
}
}
E(graph)$color[edge_list] <- "red"
plot(graph, layout = layout.circle, edge.label = E(graph)$weight)
}
v
for (i in routes_id) {
plot_graph_with_routes(g, list(non_loop_paths[[i]]))
title <- paste("Route", i)
title(main = title)
}
plot_graph_with_routes <- function(graph) {
V(graph)$color <- "orange"
V(graph)$color[V(graph)$name %in% v] <- "cyan"
E(graph)$color <- "black"
edge_list <- c()
for (route in selected_routes) {
for (j in 1:(length(route) - 1)) {
vertex1 <- route[j]
vertex2 <- route[j + 1]
edge <- get.edge.ids(graph, c(vertex1, vertex2))
if (length(edge) > 0) {
edge_list <- c(edge_list, edge)
}
}
}
E(graph)$color[edge_list] <- "red"
plot(graph, layout = layout.circle, edge.label = E(graph)$weight)
}
for (i in routes_id) {
plot_graph_with_routes(g, list(non_loop_paths[[i]]))
title <- paste("Route", i)
title(main = title)
}
plot_graph_with_routes <- function(graph, selected_routes) {
V(graph)$color <- "orange"
V(graph)$color[V(graph)$name %in% v] <- "cyan"
E(graph)$color <- "black"
edge_list <- c()
for (route in selected_routes) {
for (j in 1:(length(route) - 1)) {
vertex1 <- route[j]
vertex2 <- route[j + 1]
edge <- get.edge.ids(graph, c(vertex1, vertex2))
if (length(edge) > 0) {
edge_list <- c(edge_list, edge)
}
}
}
E(graph)$color[edge_list] <- "red"
plot(graph, layout = layout.circle, edge.label = E(graph)$weight)
}
for (i in routes_id) {
plot_graph_with_routes(g, list(non_loop_paths[[i]]))
title <- paste("Route", i)
title(main = title)
}
for (i in routes_id) {
plot_graph_with_routes(g, list(non_loop_paths[[i]]))
title <- paste("Route", i)
title(main = title)
}
for (i in routes_id) {
plot_graph_with_routes(g, list(non_loop_paths[[i]]), v)
title <- paste("Маршрут", i)
title(main = title)
}
plot_graph_with_routes <- function(graph, selected_routes, special_nodes) {
V(graph)$color <- "black"
V(graph)$color[V(graph)$name %in% special_nodes] <- "blue"
E(graph)$color <- "black"
edge_list <- c()
for (route in selected_routes) {
for (j in 1:(length(route) - 1)) {
vertex1 <- route[j]
vertex2 <- route[j + 1]
edge <- get.edge.ids(graph, c(vertex1, vertex2))
if (length(edge) > 0) {
edge_list <- c(edge_list, edge)
}
}
}
E(graph)$color[edge_list] <- "red"
plot(graph, layout = layout.circle, edge.label = E(graph)$weight)
}
for (i in routes_id) {
plot_graph_with_routes(g, list(non_loop_paths[[i]]), v)
title <- paste("Маршрут", i)
title(main = title)
}
plot_graph_with_routes <- function(graph, selected_routes, special_nodes) {
V(graph)$color <- "black"
V(graph)$color[V(graph)$name %in% special_nodes] <- "red"
E(graph)$color <- "black"
edge_list <- c()
for (route in selected_routes) {
for (j in 1:(length(route) - 1)) {
vertex1 <- route[j]
vertex2 <- route[j + 1]
edge <- get.edge.ids(graph, c(vertex1, vertex2))
if (length(edge) > 0) {
edge_list <- c(edge_list, edge)
}
}
}
E(graph)$color[edge_list] <- "red"
plot(graph, layout = layout.circle, edge.label = E(graph)$weight)
}
for (i in routes_id) {
plot_graph_with_routes(g, list(non_loop_paths[[i]]), v)
title <- paste("Маршрут", i)
title(main = title)
}
plot_graph_with_routes <- function(graph, selected_routes, special_nodes) {
V(graph)$color <- "black"
V(graph)$color[special_nodes] <- "red"
E(graph)$color <- "black"
edge_list <- c()
for (route in selected_routes) {
for (j in 1:(length(route) - 1)) {
vertex1 <- route[j]
vertex2 <- route[j + 1]
edge <- get.edge.ids(graph, c(vertex1, vertex2))
if (length(edge) > 0) {
edge_list <- c(edge_list, edge)
}
}
}
E(graph)$color[edge_list] <- "red"
plot(graph, layout = layout.circle, edge.label = E(graph)$weight)
}
for (i in routes_id) {
plot_graph_with_routes(g, list(non_loop_paths[[i]]), v)
title <- paste("Маршрут", i)
title(main = title)
}
plot_graph_with_routes <- function(graph, selected_routes, special_nodes) {
V(graph)$color <- "orange"
V(graph)$color[selected_routes] <- "blue"
V(graph)$color[special_nodes] <- "black"
E(graph)$color <- "black"
edge_list <- c()
for (route in selected_routes) {
for (j in 1:(length(route) - 1)) {
vertex1 <- route[j]
vertex2 <- route[j + 1]
edge <- get.edge.ids(graph, c(vertex1, vertex2))
if (length(edge) > 0) {
edge_list <- c(edge_list, edge)
}
}
}
E(graph)$color[edge_list] <- "red"
plot(graph, layout = layout.circle, edge.label = E(graph)$weight)
}
for (i in routes_id) {
plot_graph_with_routes(g, list(non_loop_paths[[i]]), v)
title <- paste("Маршрут", i)
title(main = title)
}
plot_graph_with_routes <- function(graph, selected_routes, special_nodes) {
V(graph)$color <- "orange"
V(graph)$color[special_nodes] <- "black"
E(graph)$color <- "black"
edge_list <- c()
for (route in selected_routes) {
for (j in 1:(length(route) - 1)) {
vertex1 <- route[j]
vertex2 <- route[j + 1]
edge <- get.edge.ids(graph, c(vertex1, vertex2))
if (length(edge) > 0) {
edge_list <- c(edge_list, edge)
# Окрашиваем промежуточные вершины в зелёный цвет
intermediate_vertices <- route[-c(1, length(route))]
V(graph)$color[intermediate_vertices] <- "green"
}
}
}
E(graph)$color[edge_list] <- "red"
plot(graph, layout = layout.circle, edge.label = E(graph)$weight)
}
for (i in routes_id) {
plot_graph_with_routes(g, list(non_loop_paths[[i]]), v)
title <- paste("Маршрут", i)
title(main = title)
}
plot_graph_with_routes <- function(graph, selected_routes, special_nodes) {
V(graph)$color <- "orange"
V(graph)$color[special_nodes] <- "black"
E(graph)$color <- "black"
edge_list <- c()
for (route in selected_routes) {
for (j in 1:(length(route) - 1)) {
vertex1 <- route[j]
vertex2 <- route[j + 1]
edge <- get.edge.ids(graph, c(vertex1, vertex2))
edge_list <- c(edge_list, edge)
intermediate_vertices <- route[-c(1, length(route))]
V(graph)$color[intermediate_vertices] <- "green"
}
}
E(graph)$color[edge_list] <- "red"
plot(graph, layout = layout.circle, edge.label = E(graph)$weight)
}
for (i in routes_id) {
plot_graph_with_routes(g, list(non_loop_paths[[i]]), v)
title <- paste("Маршрут", i)
title(main = title)
}
for (i in routes_id) {
plot_graph_with_routes(g, list(non_loop_paths[[i]]), v)
title <- paste("Route", i)
title(main = title)
}
for (i in routes_id) {
plot_graph_with_routes(g, list(non_loop_paths[[i]]), v)
title <- paste("Route", i, "cost", time_delays[i])
title(main = title)
}
p <- ifelse(simple, rdunif(1,6,10), rdunif(1,10,40))
p
p <- ifelse(simple, rdunif(1,6,10), rdunif(1,10,45))
p
p <- ifelse(simple, rdunif(1,6,10), rdunif(1,10,46))
p
p <- ifelse(simple, rdunif(1,6,10), rdunif(1,10,46))
p
# install.packages('extraDistr')
library(digest)
library(extraDistr)
set.seed(digest2int('Сиколенко Михаил Александрович'))
simple <- F
p <- ifelse(simple, rdunif(1,6,10), rdunif(1,10,46))
p
p <- ifelse(simple, rdunif(1,6,10), rdunif(1,10,45))
p
# install.packages('extraDistr')
library(digest)
library(extraDistr)
set.seed(digest2int('Сиколенко Михаил Александрович'))
simple <- F
p <- ifelse(simple, rdunif(1,6,10), rdunif(1,10,45))
p
r <- ifelse(simple,2,rdunif(1,3,5))
r
library(igraph)
repeat
{
g <<- sample_gnp(p, ifelse(simple,0.2,0.05))
if(is_connected(g))
break
}
q <- length(E(g))
q
E(g)$weight <- rdunif(q,1,100)
V(g)$standby <- if(simple) rep(2,p) else rdunif(p,r,5)
E(g)$standby <- if(simple) rep(2,q) else rdunif(q,r,5)
v <- farthest_vertices(g)$vertices
v
k <- v[1]
l <- v[2]
library(stringr)
latex_array <- \(x) gsub('(.{0,100})\\K,',',\\\\\\\\', paste(x, collapse = ',') |> paste0(',')  , perl=TRUE) |> str_sub(end = -4)
latex_adj_list <- \(g) g |> as_edgelist() |> apply(1, \(edg) edg |> paste(collapse = '\\ue')) |> latex_array()
plot(g, layout = layout.circle, edge.label = E(g)$weight)
edge_list <- as_edgelist(g)
length(edge_list)
W <- E(g)$weight
length(W)
filter_loops <- function(paths) {
filtered_paths <- lapply(paths, function(path) {
if (!anyDuplicated(path)) {
return(path)
}
return(NULL)
})
return(filtered_paths[!sapply(filtered_paths, is.null)])
}
find_non_loop_paths <- function(g, k, l) {
all_paths <- all_simple_paths(g, from = k, to = l)
non_loop_paths <- filter_loops(all_paths)
return(non_loop_paths)
}
non_loop_paths <- find_non_loop_paths(g, k, l)
length(non_loop_paths)
p <- ifelse(simple, rdunif(1,6,10), rdunif(1,10,40))
p
# install.packages('extraDistr')
library(digest)
library(extraDistr)
set.seed(digest2int('Сиколенко Михаил Александрович'))
simple <- F
p <- ifelse(simple, rdunif(1,6,10), rdunif(1,10,40))
p
r <- ifelse(simple,2,rdunif(1,3,5))
r
library(igraph)
repeat
{
g <<- sample_gnp(p, ifelse(simple,0.2,0.05))
if(is_connected(g))
break
}
q <- length(E(g))
q
E(g)$weight <- rdunif(q,1,100)
V(g)$standby <- if(simple) rep(2,p) else rdunif(p,r,5)
E(g)$standby <- if(simple) rep(2,q) else rdunif(q,r,5)
v <- farthest_vertices(g)$vertices
v
k <- v[1]
l <- v[2]
library(stringr)
latex_array <- \(x) gsub('(.{0,100})\\K,',',\\\\\\\\', paste(x, collapse = ',') |> paste0(',')  , perl=TRUE) |> str_sub(end = -4)
latex_adj_list <- \(g) g |> as_edgelist() |> apply(1, \(edg) edg |> paste(collapse = '\\ue')) |> latex_array()
plot(g, layout = layout.circle, edge.label = E(g)$weight)
edge_list <- as_edgelist(g)
length(edge_list)
W <- E(g)$weight
length(W)
filter_loops <- function(paths) {
filtered_paths <- lapply(paths, function(path) {
if (!anyDuplicated(path)) {
return(path)
}
return(NULL)
})
return(filtered_paths[!sapply(filtered_paths, is.null)])
}
find_non_loop_paths <- function(g, k, l) {
all_paths <- all_simple_paths(g, from = k, to = l)
non_loop_paths <- filter_loops(all_paths)
return(non_loop_paths)
}
non_loop_paths <- find_non_loop_paths(g, k, l)
length(non_loop_paths)
calculate_time_delay <- function(path, graph) {
edge_indices <- t(combn(path, 2))
edge_weights <- sapply(1:(nrow(edge_indices)), function(j) {
edge <- get.edge.ids(graph, edge_indices[j, ])
if (length(edge) > 0) {
return(E(graph)$weight[edge])
} else {
return(0)
}
})
return(sum(unlist(edge_weights)))
}
time_delays <- sapply(non_loop_paths, calculate_time_delay, graph = g)
